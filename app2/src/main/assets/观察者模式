观察者(Observer)模式:是对象行为的模式,又叫做发布-订阅(Publish/Subscribe)模式、
        模型-视图(Model/View)模式、源-监听(Source/Listener)模式或从属(Dependents)模式
    观察者模式定义了一种一对多的依赖关系,让多个观察者对象同时监听某一个主题对象,这个主题对象
    在状态上发生变化时,会通知所有观察者对象,使他们能够自动更新自己。

Observer图:
抽象主题(Subject)角色:
    抽象主题角色把所有观察对象的引用保存在一个聚集(如ArrayList)里,每个主题都可以有任何数量
    的观察者.抽象主题提供一个接口,可以增加和删除观察者对象,抽象主题角色又叫做抽象被
    观察者(Observer)角色:
具体主题(ConcreteSubject)角色
    将有关状态存入具体观察者对象:在具体主题的内部状态改变时,给所有登记过的观察者发出通知.
    具体主题角色又叫做具体被观察者(Observer)角色
抽象观察者(Observer)角色:
    为所有的具体观察者定义一个接口,在得到主题的通知时更新自己,这个接口叫更新接口
具体观察者(ConcreteObserver)角色:
    存储于主题的状态自恰的状态.具体观察者角色实现抽象观察者角色所要求的的更新接口,以便使
    本身的状态与主题的状态像协调.如果需要,具体观察者角色可以保持一个指向具体主题对象的引用

Scheduler线程控制:
Schedulers.immediate():直接在当前线程中运行,相当于不指定线程,这是默认的Scheduler
Schedulers.newThread():总是启用新的线程,并在新线程中执行操作
Schedulers.io():I/O操作(读写文件、读写数据库、网络信息交互等)所使用的Scheduler,行为模式
    和newThread()差不多,区别在于io()的内部实现是用一个无数量上限的线程池,可以重用空闲的线程,
    因此多数情况下,io()比newThread()更有效率。不要把计算工作放在io()，可以避免穿件不必要的线程
Schedulers.computation():计算所使用的Scheduler.这个计算是指CPU密集型计算,即不会被I/O等操作
    限制性的操作,例如图形的计算。这个Scheduler使用的固定的线程池,大小为cpu核数。不要把I/O放在
    computation中,否则I/O操作等待时间会浪费CPU。用于计算任务,如事件循环或和回调处理,不要用于I/O
    操作(IO操作请使用Scheduler.io());默认线程数等于处理器
AndroidSchedulers.mainThread():它指定的操作将在Android主线程中运行

observeOn()指定Observer的线程
subscribeOn指定Observable的线程



